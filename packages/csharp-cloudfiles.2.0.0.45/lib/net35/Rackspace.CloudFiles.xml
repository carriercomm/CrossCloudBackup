<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rackspace.CloudFiles</name>
    </assembly>
    <members>
        <member name="T:Rackspace.CloudFiles.Domain.Request.GetPublicContainersInformationSerialized">
            <summary>
            A class to represent getting a public container's serialized information in a web request
            </summary>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.Interfaces.IAddToWebRequest">
            <summary>
            Represents a specific type of api request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.Interfaces.IAddToWebRequest.CreateUri">
            <summary>
            Creates the corresponding URI for this request.
            </summary>
            <returns>A new URI</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.Interfaces.IAddToWebRequest.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the appropiate properties to the specified request for this implementation.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetPublicContainersInformationSerialized.#ctor(System.String,Rackspace.CloudFiles.Domain.Request.Format)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.GetPublicContainersInformationSerialized"/> class.
            </summary>
            <param name="cdnManagementurl">The CDN managementurl.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetPublicContainersInformationSerialized.CreateUri">
            <summary>
            Creates the corresponding URI for this request using the format descriptor.
            </summary>
            <returns>A new URI</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetPublicContainersInformationSerialized.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the appropiate method to the specified request for this implementation.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.PutStorageDirectory">
            <summary>
            A class to represent putting a storage directory with a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.PutStorageDirectory.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.PutStorageDirectory"/> class to "upsert" a new storage directory.
            </summary>
            <param name="storageurl">The storageurl.</param>
            <param name="containername">The containername.</param>
            <param name="objname">The objname.</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.PutStorageDirectory.CreateUri">
            <summary>
            Creates the corresponding URI for this request.
            </summary>
            <returns>A new URI</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.PutStorageDirectory.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the appropiate properties to the specified request for this implementation.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.SetLoggingToContainerRequest.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            A class to represent setting logging to a container with a web request
            </summary>
            <param name="publiccontainer">The publiccontainer.</param>
            <param name="cdnManagmentUrl">The CDN managment URL.</param>
            <param name="loggingenabled">if set to <c>true</c> [loggingenabled].</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.SetLoggingToContainerRequest.CreateUri">
            <summary>
            Creates the corresponding URI for this request.
            </summary>
            <returns>A new URI</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.SetLoggingToContainerRequest.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the appropiate method and headers to the specified request for this implementation.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest.GetResponse">
            <summary>
            Gets the cloud files response for this request.
            </summary>
            <returns>The response</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest.GetRequestStream">
            <summary>
            Gets the request stream.
            </summary>
            <returns>The request stream.</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest.SetContent(System.IO.Stream,Rackspace.CloudFiles.Connection.ProgressCallback)">
            <summary>
            Sets the content from a stream into the request.
            </summary>
            <param name="stream">The stream.</param>
            <param name="progress">The progress callback to report on the amount of data that's been uploaded.</param>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest.RequestUri">
            <summary>
            Gets the request URI.
            </summary>
            <value>The request URI.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest.Method">
            <summary>
            Gets or sets the HTTP method to use for this request.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest.Headers">
            <summary>
            Gets or sets the HTTP headers to use for this request.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest.ContentLength">
            <summary>
            Gets the length of the content to send for this request.
            </summary>
            <value>The length of the content.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest.RangeTo">
            <summary>
            Gets or sets the RangeTo
            </summary>
            <value>The RangeTo.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest.RangeFrom">
            <summary>
            Gets or sets the RangeFrom
            </summary>
            <value>The RangeFrom.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest.ContentType">
            <summary>
            Gets or sets the ContentType for any content sent in this request 
            </summary>
            <value>The ContentType.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest.IfModifiedSince">
            <summary>
            Gets or sets if modified since.
            </summary>
            <value>If modified since.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest.ETag">
            <summary>
            Gets the ETag
            </summary>
            <value>The ETag value.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest.AllowWriteStreamBuffering">
            <summary>
            Gets or sets a value indicating whether to allow write stream buffering.
            </summary>
            <value><c>true</c> if [allow write stream buffering]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest.SendChunked">
            <summary>
            Gets or sets a value indicating whether to send chunked data
            </summary>
            <value><c>true</c> if [send chunked]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest.ContentStream">
            <summary>
            Gets the content stream.
            </summary>
            <value>The content stream.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest.Timeout">
            <summary>
            Gets/Sets the amount of time to wait for the request to complete.
            </summary>
            <remarks>Setting Timeout to null causes the System.Threading.Timeout.Infinit value to be used.</remarks>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Response.IResponse">
            <summary>
            The interface for all responses returned from cloudfiles
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.IResponse.Status">
            <summary>
            A property representing the status of the request from cloudfiles
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.IResponse.Headers">
            <summary>
            A collection of key-value pairs representing the headers returned from each request
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.Interfaces.ICloudFilesResponse.Metadata">
            <summary>
            dictionary of meta tags assigned to this storage item
            </summary>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.InsecureUrlException">
            <summary>
            Description of InsecureUrlException.
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.IConnection.StorageUrl">
            <summary>
            The storage url used to interact with cloud files
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.IConnection.AuthToken">
            <summary>
            the session based token used to ensure the user was authenticated
            </summary>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.AccountInformation">
            <summary>
            Encapsulates customer's account information including the container count and bytes used.
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.AccountInformation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of AccountInformation class for customer
            </summary>
            <param name="containerCount">The number of containers a customer owns</param>
            <param name="bytesUsed">The bytes used by a customer</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference arguments are null</exception>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.AccountInformation.ContainerCount">
            <summary>
            Gets or sets the number of the containers a customer owns
            </summary>
            <return>number of containers</return>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.AccountInformation.BytesUsed">
            <summary>
            Gets or sets the bytes used by a customer
            </summary>
            <return>number of bytes</return>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.GetAccountInformation">
            <summary>
            A class to represent getting account information in a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetAccountInformation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.GetAccountInformation"/> class.
            </summary>
            <param name="storageUrl">The storage URL.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetAccountInformation.CreateUri">
            <summary>
            Creates the URI.
            </summary>
            <returns>A new URI for this container</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetAccountInformation.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the apropiate method to the specified request.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.GetAccountInformationSerialized">
            <summary>
            A class to represent getting serialzed account information in a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetAccountInformationSerialized.#ctor(System.String,Rackspace.CloudFiles.Domain.Request.Format)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.GetAccountInformationSerialized"/> class.
            </summary>
            <param name="storageUrl">The storage URL.</param>
            <param name="format">The requested format to receive for this request <see cref="T:Rackspace.CloudFiles.Domain.Request.Format"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetAccountInformationSerialized.CreateUri">
            <summary>
            Creates the URI.
            </summary>
            <returns>A new URI for this container</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetAccountInformationSerialized.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the apropiate method to the specified request.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.GetPublicContainerInformation">
            <summary>
            A class to represent getting a public container's information in a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetPublicContainerInformation.CreateUri">
            <summary>
            Creates the corresponding URI for this request using cdn management url and container name.
            </summary>
            <returns>A new URI</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetPublicContainerInformation.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the appropiate method to the specified request for this implementation.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.GetPublicContainers">
            <summary>
            A class to represent getting a set of public containers in a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetPublicContainers.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.GetPublicContainers"/> class.
            </summary>
            <param name="cdnManagementUrl">The CDN management URL.</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetPublicContainers.CreateUri">
            <summary>
            Creates the corresponding URI for this request.
            </summary>
            <returns>A new URI</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetPublicContainers.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the appropiate method to the specified request for this implementation.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.MarkContainerAsPublic">
            <summary>
            A class to represent marking a container public in a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.MarkContainerAsPublic.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.MarkContainerAsPublic"/> class to add this container to the list of containers to be served up publicly.
            </summary>
            <param name="cdnManagementUrl">The URL that will be used for accessing content from CloudFS</param>
            <param name="containerName">The name of the container to make public on the CDN</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.MarkContainerAsPublic.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.MarkContainerAsPublic"/> class to add this container to the list of containers to be served up publicly.
            </summary>
            <param name="cdnManagementUrl">The URL that will be used for accessing content from CloudFS</param>
            <param name="containerName">The name of the container to make public on the CDN</param>
            <param name="timeToLiveInSeconds">The maximum time (in seconds) content should be kept alive on the CDN before it checks for freshness.</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.MarkContainerAsPublic.CreateUri">
            <summary>
            Creates the corresponding URI for this request.
            </summary>
            <returns>A new URI</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.MarkContainerAsPublic.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the appropiate method and headers to the specified request for this implementation.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.SetPublicContainerDetails.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Assigns various details to containers already publicly available on the CDN
            </summary>
            <param name="cdnManagementUrl">The CDN URL</param>
            <param name="containerName">The name of the container to update the details for</param>
            <param name="isCdnEnabled">Sets whether or not specified container is available on the CDN</param>
            <param name="isLoggingEnabled">sets whether or not logging is enabled</param>
            <param name="timeToLiveInSeconds">the time limit for the container to be public</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Response.CloudFilesResponse">
            <summary>
            Represents the response information from a CloudFiles request
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.CloudFilesResponse.Status">
            <summary>
            A property representing the HTTP Status code returned from cloudfiles
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.CloudFilesResponse.Headers">
            <summary>
            A collection of key-value pairs representing the headers returned from the create container request
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.CloudFilesResponse.Metadata">
            <summary>
            dictionary of meta tags assigned to this storage item
            </summary>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Response.CloudFilesResponseWithContentBody">
            <summary>
            This class wraps the response from the cloud files request when expecting a content body
            </summary>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Response.IResponseWithContentBody">
            <summary>
            An interface representing responses with a content body
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.IResponseWithContentBody.ContentStream">
            <summary>
            A property representing the stream returned from cloudfiles
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.IResponseWithContentBody.ContentBody">
            <summary>
            A property representing the parsed content body broken down line by line
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.IResponseWithContentBody.ContentLength">
            <summary>
            A property representing the length, in bytes, of the content body
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.IResponseWithContentBody.ContentType">
            <summary>
            A property representing the MIME type of the response body
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Response.CloudFilesResponseWithContentBody.#ctor">
            <summary>
            The default constructor for creating this response
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Response.CloudFilesResponseWithContentBody.Dispose">
            <summary>
            This method must be called once the stream has been processed to release the resources associated with the request
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.CloudFilesResponseWithContentBody.Status">
            <summary>
            A property containing the HTTP status code from the transaction
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.CloudFilesResponseWithContentBody.Headers">
            <summary>
            A collection of key-value pairs representing the headers returned from the get container item list request
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.CloudFilesResponseWithContentBody.ContentBody">
            <summary>
            A property containing the list of lines from the content body
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.CloudFilesResponseWithContentBody.ContentType">
            <summary>
            A property representing the MIME type of the content in the body of the response
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.CloudFilesResponseWithContentBody.ContentLength">
            <summary>
            A property representing the length of the content in the body of the response
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.CloudFilesResponseWithContentBody.ContentStream">
            <summary>
            A property representing the stream returned from the response
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.StorageItemInformation.#ctor(System.Net.WebHeaderCollection)">
            <summary>
            constructor
            </summary>
            <param name="headers">collection of headers assigned to this storage item</param>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.StorageItemInformation.ETag">
            <summary>
            entity tag used to determine if any content changed in transfer - http://en.wikipedia.org/wiki/HTTP_ETag
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.StorageItemInformation.ContentType">
            <summary>
            http content type of the storage item
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.StorageItemInformation.ContentLength">
            <summary>
            http content length of the storage item
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.StorageItemInformation.Metadata">
            <summary>
            dictionary of meta tags assigned to this storage item
            </summary>
        </member>
        <member name="T:Rackspace.CloudFiles.Utils.EnumHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.EnumHelper.GetDescription(System.Enum)">
            <summary>
            
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.ContainerNotEmptyException">
            <summary>
            This exception is thrown when the user attempts to delete a container that still has storage objects associated with it
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.ContainerNotEmptyException.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.ContainerNotEmptyException.#ctor(System.String)">
            <summary>
            A constructor for more explicitly explaining the reason for failure
            </summary>
            <param name="msg">A message for describing the exception in detail</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.InvalidRangeHeaderException">
            <summary>
            This exception is thrown when the Range header contains invalid range values
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.InvalidRangeHeaderException.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.InvalidRangeHeaderException.#ctor(System.String)">
            <summary>
            An explicit constructor for describing the acceptable range header format
            </summary>
            <param name="msg">Used to more explicitly indicate the reason for failure</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.DateTimeHttpHeaderFormatException">
            <summary>
            This exception is thrown when the date is in a non-HTTP 1.1 compliant format
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.DateTimeHttpHeaderFormatException.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.DateTimeHttpHeaderFormatException.#ctor(System.String)">
            <summary>
            A constructor for describing the correct date formatting
            </summary>
            <param name="message">Used to be more explicit about the acceptable datetime format</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.NoContainersFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.NoContainersFoundException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Container">
            <summary>
            Container
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Container.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="containerName">Name of the container</param>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Container.ByteCount">
            <summary>
            Size of the container
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Container.ObjectCount">
            <summary>
            Number of items in the container
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Container.Name">
            <summary>
            Name of the container
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Container.TTL">
            <summary>
            The maximum time (in seconds) content should be kept alive on the CDN before it checks for freshness.
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Container.CdnUri">
            <summary>
            The URI one can use to access objects in this container via the CDN. No time based URL stuff will be included with this URI
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Container.ReferrerACL">
            <summary>
            Referrer ACL 
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Container.UserAgentACL">
            <summary>
            User Agent ACL
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Container.CdnSslUri">
            <summary>
            The SSL URI one can use to access objects in this container via the CDN.
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Container.CdnStreamingUri">
            <summary>
            The Streaming URI one can use to access objects in this container via the CDN.
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Container.Metadata">
            <summary>
            Gets/Sets the metadata associated with the container.
            </summary>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.DeleteContainer">
            <summary>
            A class to represent deleting a container in a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.DeleteContainer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.DeleteContainer"/> class.
            </summary>
            <param name="url">The customer unique url or public url to interact with cloudfiles</param>
            <param name="containerName">The name of the container where the storage item is located</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.ContainerNameException">Thrown when the container name is invalid</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.StorageItemNameException">Thrown when the object name is invalid</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.DeleteContainer.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.DeleteContainer"/> class.
            </summary>
            <param name="url">The customer unique url or public url to interact with cloudfiles</param>
            <param name="containerName">The name of the container where the storage item is located</param>
            <param name="emailAddresses">The email addressese to notify once deletion is complete</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.ContainerNameException">Thrown when the container name is invalid</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.StorageItemNameException">Thrown when the object name is invalid</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.DeleteContainer.CreateUri">
            <summary>
            Creates the URI.
            </summary>
            <returns>A new URI for this container</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.DeleteContainer.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the apropiate method to the specified request.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.DeleteStorageItem">
            <summary>
            A class to represent deleting a storage item in a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.DeleteStorageItem.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.DeleteStorageItem"/> class.
            </summary>
            <param name="url">the customer unique url to interact with cloudfiles</param>
            <param name="containerName">the name of the container where the storage item is located</param>
            <param name="storageItemName">the name of the storage item to add meta information too</param>
            <param name="emailAddresses">the email addresses to notify who</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.ContainerNameException">Thrown when the container name is invalid</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.StorageItemNameException">Thrown when the object name is invalid</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.DeleteStorageItem.CreateUri">
            <summary>
            Creates the URI.
            </summary>
            <returns>A new URI for this container</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.DeleteStorageItem.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the apropiate method to the specified request.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.GetAuthentication">
            <summary>
            A class to represent getting authentication in a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetAuthentication.#ctor(Rackspace.CloudFiles.Domain.UserCredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.GetAuthentication"/> class.
            </summary>
            <param name="userCreds">the UserCredentials instace to use when attempting authentication</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference arguments are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetAuthentication.#ctor(Rackspace.CloudFiles.Domain.UserCredentials,System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.GetAuthentication"/> class.
            </summary>
            <param name="userCreds">the UserCredentials instace to use when attempting authentication</param>
            <param name="timeout">The amount of time to wait for the request to complete.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if userCreds parameter is null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetAuthentication.CreateUri">
            <summary>
            Creates the corresponding URI using user credentials for authentication.
            </summary>
            <returns>A new URI</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetAuthentication.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the corresponding method and headers for this authentication request.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.GetAuthentication.Timeout">
            <summary>
            Gets/Sets the request timeout.
            </summary>
            <remarks>
            If Timeout is set to null, System.Threading.Timeout.Infinite 
            will be used as the timeout.
            </remarks>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.GetContainerItemList">
            <summary>
            A class to represent getting a container's item list in a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetContainerItemList.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{Rackspace.CloudFiles.GetListParameters,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.GetContainerItemList"/> class.
            </summary>
            <param name="storageUrl">The customer unique url to interact with cloudfiles</param>
            <param name="containerName">The name of the container where the storage item is located</param>
            <param name="requestParameters">dictionary of parameter filters to place on the request url</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.ContainerNameException">Thrown when the container name is invalid</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetContainerItemList.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.GetContainerItemList"/> class.
            </summary>
            <param name="storageUrl">The customer unique url to interact with cloudfiles</param>
            <param name="containerName">The name of the container where the storage item is located</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetContainerItemList.CreateUri">
            <summary>
            Creates the corresponding URI using this container and item list parameters.
            </summary>
            <returns>A new URI</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetContainerItemList.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the appropiate request method.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.RequestHeaderFields">
            <summary>
            Possible HTTP comparison header fields to apply to a request
            </summary>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.GetStorageItem">
            <summary>
            A class to represent getting a storage item in a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetStorageItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.GetStorageItem"/> class.
            </summary>
            <param name="storageUrl">the customer unique url to interact with cloudfiles</param>
            <param name="containerName">the name of the container where the storage item is located</param>
            <param name="storageItemName">the name of the storage item to add meta information too</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.ContainerNameException">Thrown when the container name length exceeds the maximum container length allowed</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetStorageItem.#ctor(System.String,System.String,System.String,System.Collections.Generic.Dictionary{Rackspace.CloudFiles.Domain.Request.RequestHeaderFields,System.String})">
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.GetStorageItem"/> class with HTTP comparison header fields
            <param name="storageUrl">the customer unique url to interact with cloudfiles</param>
            <param name="containerName">the name of the container where the storage item is located</param>
            <param name="storageItemName">the name of the storage item to add meta information too</param>
            <param name="requestHeaderFields">dictionary of request header fields to apply to the request</param>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.ContainerNameException">Thrown when the container name is invalid</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.StorageItemNameException">Thrown when the object name is invalid</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetStorageItem.AddRequestFieldHeadersToRequestHeaders(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{Rackspace.CloudFiles.Domain.Request.RequestHeaderFields,System.String}},Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Adds the request field headers to request headers.
            </summary>
            <param name="requestHeaderFields">The request header fields.</param>
            <param name="request">The request.</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetStorageItem.IsSpecialRequestHeaderField(Rackspace.CloudFiles.Domain.Request.RequestHeaderFields)">
            <summary>
            Determines whether {CC2D43FA-BBC4-448A-9D0B-7B57ADF2655C}[is a special request header field] [the specified key].
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if [is special request header field] [the specified key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetStorageItem.VerifyAndSplitRangeHeader(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest,System.String)">
            <summary>
            Verifies the and split range header.
            </summary>
            <param name="request">The request.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetStorageItem.ParserDateTimeHttpHeader(System.String)">
            <summary>
            Parsers the date time HTTP header.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetStorageItem.CreateUri">
            <summary>
            Creates the corresponding URI for this request using storage item info.
            </summary>
            <returns>A new URI</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetStorageItem.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the appropiate method and headers to the specified request for this implementation.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Response.GetStorageItemResponse">
            <summary>
            This class wraps the response from the get storage item request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Response.GetStorageItemResponse.#ctor">
            <summary>
            The default constructor for creating instances of GetStorageItemResponse
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Response.GetStorageItemResponse.Dispose">
            <summary>
            This method must be called once the stream has been processed to release the resources associated with the request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Response.GetStorageItemResponse.SaveStreamToDisk(System.String)">
            <summary>
            This method saves the stream from the response directly to a named file on disk
            </summary>
            <param name="filename">The file name to save the stream to locally</param>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.GetStorageItemResponse.Status">
            <summary>
            A property containing the HTTP status code from the transaction
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.GetStorageItemResponse.ContentBody">
            <summary>
            A property representing the binary information making up the storage item
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.GetStorageItemResponse.Headers">
            <summary>
            A collection of key-value pairs representing the headers returned from the get storage item request
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.GetStorageItemResponse.ContentLength">
            <summary>
            A property representing the size, in bytes, of the stream representing the storage item
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.GetStorageItemResponse.ContentType">
            <summary>
            A property representing the MIME type of the storage item
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Response.GetStorageItemResponse.ContentStream">
            <summary>
            A property representing the stream returned from the response
            </summary>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.GetContainerInformation">
            <summary>
            A class to represent getting a container's information in a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetContainerInformation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.GetContainerInformation"/> class.
            </summary>
            <param name="storageUrl">The customer unique url to interact with cloudfiles</param>
            <param name="containerName">The name of the container where the storage item is located</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.ContainerNameException">Thrown when the container name is invalid</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetContainerInformation.CreateUri">
            <summary>
            Creates the corresponding URI for this request using this container.
            </summary>
            <returns>A new URI</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetContainerInformation.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the method to the specified request.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.GetContainerInformationSerialized">
            <summary>
            A class to represent getting a container's serialized information in a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetContainerInformationSerialized.#ctor(System.String,System.String,Rackspace.CloudFiles.Domain.Request.Format)">
            <summary>
            GetContainerInformationSerialized constructor
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetContainerInformationSerialized.CreateUri">
            <summary>
            Creates the corresponding URI for this request using this container and format indicator.
            </summary>
            <returns>A new URI</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetContainerInformationSerialized.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the appropiate method to the specified request.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.GetStorageItemInformation">
            <summary>
            A class to represent getting a set of public containers in a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetStorageItemInformation.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.GetStorageItemInformation"/> class.
            </summary>
            <param name="storageUrl">The customer unique url to interact with cloudfiles</param>
            <param name="containerName">The name of the container where the storage item is located</param>
            <param name="storageItemName">The name of the storage item to add meta information too</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.ContainerNameException">Thrown when the container name is invalid</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.StorageItemNameException">Thrown when the object name is invalid</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetStorageItemInformation.CreateUri">
            <summary>
            Creates the corresponding URI for this request using storage item name.
            </summary>
            <returns>A new URI</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetStorageItemInformation.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the appropiate method to the specified request for this implementation.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.GetContainers">
            <summary>
            A class to represent getting a set of containers in a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetContainers.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.GetContainers"/> class.
            </summary>
            <param name="storageUrl">The customer unique url to interact with cloudfiles</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetContainers.#ctor(System.String,System.Collections.Generic.Dictionary{Rackspace.CloudFiles.GetListParameters,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.GetContainers"/> class.
            </summary>
            <param name="storageUrl">The customer unique url to interact with cloudfiles</param>
            <param name="requestParameters">dictionary of parameter filters to place on the request url</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetContainers.CreateUri">
            <summary>
            Creates the corresponding URI for this request.
            </summary>
            <returns>A new URI</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.GetContainers.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the appropiate method to the specified request for this implementation.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest">
            <summary>
            Wraps requests to optionally handle proxy credentials and SSL.
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest"/> class.
            </summary>
            <param name="uri">The URI for a creating a web request.</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.#ctor(System.Net.HttpWebRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest"/> class without proxy creditials provided.
            </summary>
            <param name="request">The request being sent to the server</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.#ctor(System.Net.HttpWebRequest,Rackspace.CloudFiles.Domain.ProxyCredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest"/> class with proxy creditials provided.
            </summary>
            <param name="request">The request being sent to the server</param>
            <param name="proxyCredentials">Proxy credentials</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference arguments are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.StringifyMD5(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Stringifies bytes to MD5.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>An MD5 string</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.SetContent(System.IO.Stream,Rackspace.CloudFiles.Connection.ProgressCallback)">
            <summary>
            Sets the content from a stream into the request.
            </summary>
            <param name="stream">The stream of content.</param>
            <param name="progress">The progress callback to report on the amount of data that's been uploaded.</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.GetRequestStream">
            <summary>
            Gets the request stream.
            </summary>
            <returns>The request stream.</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.GetResponse">
            <summary>
            Get the cloud files web response from the current web request.
            </summary>
            <returns>A HttpWebRequest object that has all the information to make a request against CloudFiles</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.HandleRangeHeader(System.Net.HttpWebRequest)">
            <summary>
            Handles the range header.
            </summary>
            <param name="webrequest">The webrequest.</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.HandleProxyCredentialsFor(System.Net.WebRequest)">
            <summary>
            Handles the proxy credentials for a web request.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.AttachBodyToWebRequest(System.Net.WebRequest)">
            <summary>
            Attaches the body to web request.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.ContentStream">
            <summary>
            Gets the content stream.
            </summary>
            <value>The content stream.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.RequestType">
            <summary>
            Gets the type of the request.
            </summary>
            <value>The type of the request.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.SendChunked">
            <summary>
            Gets or sets a value indicating whether to send chunked data
            </summary>
            <value><c>true</c> if [send chunked]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.RequestUri">
            <summary>
            Gets the request URI.
            </summary>
            <value>The request URI.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.Method">
            <summary>
            Gets or sets the HTTP method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.Headers">
            <summary>
            Gets the HTTP headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.ContentLength">
            <summary>
            Gets the length of the request content.
            </summary>
            <value>The length of the content.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.RangeTo">
            <summary>
            Gets or sets the RangeTo
            </summary>
            <value>The RangeTo.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.RangeFrom">
            <summary>
            Gets or sets the RangeFrom
            </summary>
            <value>The RangeFrom.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.ContentType">
            <summary>
            Gets or sets the request ContentType
            </summary>
            <value>The ContentType.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.IfModifiedSince">
            <summary>
            Gets or sets IfModifiedSince timestamp
            </summary>
            <value>The IfModifiedSince property.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.ETag">
            <summary>
            Gets the ETag in headers.
            </summary>
            <value>The ETag value.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.AllowWriteStreamBuffering">
            <summary>
            Gets or sets a value indicating whether to allow write stream buffering.
            </summary>
            <value><c>true</c> if [allow write stream buffering]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.UserAgent">
            <summary>
            Gets or sets the user agent.
            </summary>
            <value>The user agent.</value>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.Request.CloudFilesRequest.Timeout">
            <summary>
            Gets/Sets the request timeout.
            </summary>
            <remarks>
            If the specified value (converted to Milliseconds) exceeds Int32.MaxValue
            or is less than 0 and not equal to System.Threading.Timeout.Infinite,
            an ArgumentOutOfRangeException will be thrown.
            Setting the Timeout to null causes the System.Threading.Timeout.Inifinite
            value to be used.
            </remarks>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.SetStorageItemMetaInformation">
            <summary>
            SetStorageItemMetaInformation
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.SetStorageItemMetaInformation.#ctor(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            SetStorageItemMetaInformation constructor
            </summary>
            <param name="storageUrl">the customer unique url to interact with cloudfiles</param>
            <param name="containerName">the name of the container where the storage item is located</param>
            <param name="storageItemName">the name of the storage item to add meta information too</param>
            <param name="metadata">dictionary containing the meta tags on the storage item</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the arguments are null</exception>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.ProxyCredentials">
            <summary>
            ProxyCredentials
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.ProxyCredentials.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="proxyAddress"></param>
            <param name="proxyUsername"></param>
            <param name="proxyPassword"></param>
            <param name="proxyDomain"></param>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.ProxyCredentials.ProxyDomain">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.ProxyCredentials.ProxyPassword">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.ProxyCredentials.ProxyUsername">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.ProxyCredentials.ProxyAddress">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.CreateContainer">
            <summary>
            A class to represent creating a container in a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.CreateContainer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.CreateContainer"/> class.
            </summary>
            <param name="storageUrl">The customer unique url to interact with cloudfiles</param>
            <param name="containerName">The name of the container where the storage item is located</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference arguments are null</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.ContainerNameException">Thrown when the container name is invalid</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.StorageItemNameException">Thrown when the object name is invalid</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.CreateContainer.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.CreateContainer"/> class.
            </summary>
            <param name="storageUrl">The customer unique url to interact with cloudfiles</param>
            <param name="containerName">The name of the container to create.</param>
            <param name="metadata">The metadata to associate with the new container.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference arguments are null</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.ContainerNameException">Thrown when the container name is invalid</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.StorageItemNameException">Thrown when the object name is invalid</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.CreateContainer.CreateUri">
            <summary>
            Creates the URI.
            </summary>
            <returns>A new URI for this container</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.CreateContainer.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the appropiate method to the specified request.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.Request.PutStorageItem">
            <summary>
            A class to represent putting a storage item with a web request
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.PutStorageItem.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.PutStorageItem"/> class for putting an item without a file stream.
            </summary>
            <param name="storageUrl">The customer unique url to interact with cloudfiles</param>
            <param name="containerName">The name of the container where the storage item is located</param>
            <param name="remoteStorageItemName">The name of the storage item to add meta information too</param>
            <param name="localFilePath">The path of the file to put into cloudfiles</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.PutStorageItem.#ctor(System.String,System.String,System.String,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.PutStorageItem"/> class for putting an item without meta data.
            </summary>
            <param name="storageUrl">The customer unique url to interact with cloudfiles</param>
            <param name="containerName">The name of the container where the storage item is located</param>
            <param name="remoteStorageItemName">The name of the storage item to add meta information too</param>
            <param name="filestream">The file stream of the file to put into cloudfiles</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.PutStorageItem.#ctor(System.String,System.String,System.String,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.PutStorageItem"/> class for putting an item with meta data.
            </summary>
            <param name="storageUrl">the customer unique url to interact with cloudfiles</param>
            <param name="containerName">the name of the container where the storage item is located</param>
            <param name="remoteStorageItemName">the name of the storage item to add meta information too</param>
            <param name="fileToSend">the file stream of the file to put into cloudfiles</param>
            <param name="metadata">dictionary of meta tags to apply to the storage item</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.ContainerNameException">Thrown when the container name is invalid</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.StorageItemNameException">Thrown when the object name is invalid</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.PutStorageItem.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Rackspace.CloudFiles.Domain.Request.PutStorageItem"/> class for putting an item with a local file.
            </summary>
            <param name="storageUrl">The customer unique url to interact with cloudfiles</param>
            <param name="containerName">The name of the container where the storage item is located</param>
            <param name="remoteStorageItemName">The name of the storage item to add meta information too</param>
            <param name="localFilePath">The path of the file to put into cloudfiles</param>
            <param name="metadata">Dictionary of meta tags to apply to the storage item</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.ContainerNameException">Thrown when the container name is invalid</exception>
            <exception cref="T:Rackspace.CloudFiles.Exceptions.StorageItemNameException">Thrown when the object name is invalid</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.PutStorageItem.ContentType">
            <summary>
            Content type for the storage item
            </summary>
            <returns>
            Storage item's content type
            </returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.PutStorageItem.CleanUpFilePath(System.String)">
            <summary>
            Cleans up file path.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>Cleaned file path</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.PutStorageItem.CreateUri">
            <summary>
            Creates the corresponding URI for this request using the storage item info.
            </summary>
            <returns>A new URI</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.Request.PutStorageItem.Apply(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            Applies the appropiate properties to the specified request for this implementation.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.IResponseFactory">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.ResponseFactory">
            <summary>
            ResponseFactory
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.ResponseFactory.Create(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.IResponseFactoryWithContentBody.Create(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.ResponseFactoryWithContentBody">
            <summary>
            ResponseFactoryWithContentBody
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.ResponseFactoryWithContentBody.Create(Rackspace.CloudFiles.Domain.Request.Interfaces.ICloudFilesRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.ContainerAlreadyExistsException">
            <summary>
            Thrown when attempting to create a container that already exists in cloudfiles
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.ContainerAlreadyExistsException.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.ContainerAlreadyExistsException.#ctor(System.String)">
            <summary>
            A constructor for explaining the nature of the exception
            </summary>
            <param name="msg">A message describing the failure</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.ContainerNotFoundException">
            <summary>
            This exception is thrown when the requested container does not exist on cloudfiles
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.ContainerNotFoundException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.ContainerNotFoundException.#ctor(System.String)">
            <summary>
            A constructor for describing the missing containing more explicitly
            </summary>
            <param name="msg">A message used to explicitly describe the failure when requesting the non-existence container</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.InvalidETagException">
            <summary>
            This exception is thrown when an invalid MD5 ETag is supplied with a file being stored on cloudfiles
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.InvalidETagException.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.InvalidETagException.#ctor(System.String)">
            <summary>
            A constructor for describing the correct formatting and acceptable value for the ETag header
            </summary>
            <param name="msg">Used to more explicitly indicate the reason for failure</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.PreconditionFailedException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.PreconditionFailedException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.PublicContainerNotFoundException">
            <summary>
            This exception is thrown when the requested container has not been made public
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.PublicContainerNotFoundException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.PublicContainerNotFoundException.#ctor(System.String)">
            <summary>
            A constructor for describing the missing containing more explicitly
            </summary>
            <param name="msg">A message used to explicitly describe the failure when requesting the non-public container</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.StorageItemNotFoundException">
            <summary>
            This exception is thrown when the requested storage item does not exist on cloudfiles in the container specified 
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.StorageItemNotFoundException.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.StorageItemNotFoundException.#ctor(System.String)">
            <summary>
            A constructor for more explicitly describing the reason for failure
            </summary>
            <param name="msg">The message detailing the failure</param>
        </member>
        <member name="T:Rackspace.CloudFiles.GetListParameters">
            <summary>
            enumeration of filters to place on the request url
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.UploadProgress.#ctor(System.UInt64,Rackspace.CloudFiles.IConnection,System.EventHandler{Rackspace.CloudFiles.UploadProgress},System.Object)">
            <summary>
            Initializes a new instance of the UploadProgress class.
            </summary>
            <param name="filesize">The size of the file being uploaded.</param>
            <param name="connection">The connection the transfer is being attempted on.</param>
            <param name="callback">The callback method used to notify the requestor of progress.</param>
            <param name="context">A context object specified by the requestor.</param>
        </member>
        <member name="M:Rackspace.CloudFiles.UploadProgress.OnProgress(System.Int32)">
            <summary>
            The method callbed by the PutStorageItem progress handler.
            </summary>
            <param name="bytesTx">The number of bytes that were transmitted.</param>
        </member>
        <member name="M:Rackspace.CloudFiles.UploadProgress.GetProgress(System.UInt64@)">
            <summary>
            Gets the bytes remaining for the upload.
            </summary>
            <param name="bytesTransferred">On output, stores the number of bytes already transferred.</param>
            <returns>The number of bytes remaining for the upload</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.UploadProgress._shouldTriggerCallback(System.Boolean)">
            <summary>
            Indicates whether or not the callback method should be triggered.
            </summary>
            <param name="setComplete">
            Indicates if this method was called from the progress handler while
            it was setting the status to complete, in which case, the callback should always be called
            if it's not pending already.
            </param>
            <returns>true if the callback should be called, otherwise false.</returns>
            <remarks>This method should only be called from within a lock (_syncLock) block.</remarks>
        </member>
        <member name="M:Rackspace.CloudFiles.UploadProgress._onCallbackStarted">
            <summary>
            Called from the ThreadPool thread that actually triggers the callback.
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.UploadProgress._onCallbackCompleted(System.Boolean)">
            <summary>
            Called by the ThreadPool thread when the callback method has completed executing.
            </summary>
        </member>
        <member name="F:Rackspace.CloudFiles.UploadProgress._callback">
            <summary>
            The callback method used to notify the subscriber of progress.
            </summary>
        </member>
        <member name="F:Rackspace.CloudFiles.UploadProgress._syncLock">
            <summary>
            Object used to sync access to the object between threads.
            </summary>
        </member>
        <member name="F:Rackspace.CloudFiles.UploadProgress._prevCallbackTxPos">
            <summary>
            The number of bytes that were transmitted the last time the 
            callback method was called.
            </summary>
        </member>
        <member name="F:Rackspace.CloudFiles.UploadProgress._lastCallbackTime">
            <summary>
            The last time the callback method was called.
            </summary>
        </member>
        <member name="F:Rackspace.CloudFiles.UploadProgress._callbackPending">
            <summary>
            Indicates whether or not the callback method is currently pending.
            </summary>
        </member>
        <member name="F:Rackspace.CloudFiles.UploadProgress._completionNotificationSent">
            <summary>
            Indicates whether or not the final, completion notification 
            callback was called.
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.UploadProgress.MaxCallbackFreq">
            <summary>
            The amount of time that must elapse between calls to the callback method.
            </summary>
            <remarks>
            If this value is null, the callback will not be filtered based on time elapsed
            since the previous call.
            </remarks>
        </member>
        <member name="P:Rackspace.CloudFiles.UploadProgress.MaxBytesTxDeltaFreq">
            <summary>
            Specifies the the number of bytes that can be transmitted
            between calls to the callback function, when the MaxCallbackFreq
            is enabled, before the MaxCallbackFreq is ignored and the callback is
            called.
            </summary>
            <remarks>
            Example:
            If the MaxCallbackFreq is set to 10 seconds, and MaxBytesTxDeltaFreq is set to 32768 bytes,
            and it has been 6 seconds since the previous call to the callback method, but 49152 bytes
            have been transmitted since the previous call to the callback method, the MaxCallbackFreq will
            be ignored, and the callback will be called.
            </remarks>
        </member>
        <member name="P:Rackspace.CloudFiles.UploadProgress.MinBytesTxDeltaFreq">
            <summary>
            The minimum number of bytes that must be transmitted between calls to the callback,
            regardless of the MaxCallbackFreq.
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.UploadProgress.Context">
            <summary>
            Gets the caller defined context object.
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.UploadProgress.Connection">
            <summary>
            The IConnection the upload was attempted on.
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.UploadProgress.UploadSize">
            <summary>
            The size of the upload, in bytes.
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.UploadProgress.BytesTransferred">
            <summary>
            The number of bytes already transferred.
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.UploadProgress.IsComplete">
            <summary>
            Indicates whether or not the upload is complete.
            </summary>
        </member>
        <member name="T:Rackspace.CloudFiles.Connection">
            <summary>
            This class represents the primary means of interaction between a user and cloudfiles. Methods are provided representing all of the actions
            one can take against his/her account, such as creating containers and downloading storage objects. 
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            </code>
            </example>
        </member>
        <member name="F:Rackspace.CloudFiles.Connection._authenticationTimeout">
            <summary>
            The authentication token returned from CloudFiles expires after 24 hours.
            </summary>
        </member>
        <member name="F:Rackspace.CloudFiles.Connection._authRequestTimeout">
            <summary>
            The amount of time to wait for the authentication attempt to complete.
            </summary>
            <remarks>
            This value is currently only set when attempting a re-authentication attempt.
            </remarks>
        </member>
        <member name="F:Rackspace.CloudFiles.Connection._reAuthenticationInterval">
            <summary>
            Attempt to re-authenticate once per minute, if we're not authenticated.
            </summary>
        </member>
        <member name="F:Rackspace.CloudFiles.Connection._authenticationPending">
            <summary>
            Indicates whether or not an re-authenticate attempt is pending.
            </summary>
        </member>
        <member name="F:Rackspace.CloudFiles.Connection._reAuthenticateTimer">
            <summary>
            A timer used to re-authenticate the connection.
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.#ctor(Rackspace.CloudFiles.Domain.UserCredentials)">
            <summary>
            A constructor used to create an instance of the Connection class
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            </code>
            </example>
            <param name="userCreds">An instance of the UserCredentials class, containing all pertinent authentication information</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetAccountInformation">
            <summary>
            This method returns the number of containers and the size, in bytes, of the specified account
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            AccountInformation accountInformation = connection.GetAccountInformation();
            </code>
            </example>
            <returns>An instance of AccountInformation, containing the byte size and number of containers associated with this account</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetAccountInformationJson">
            <summary>
            Get account information in json format
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            string jsonReturnValue = connection.GetAccountInformationJson();
            </code>
            </example>
            <returns>JSON serialized format of the account information</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetAccountInformationXml">
            <summary>
            Get account information in xml format
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            XmlDocument xmlReturnValue = connection.GetAccountInformationXml();
            </code>
            </example>
            <returns>XML serialized format of the account information</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.CreateContainer(System.String)">
            <summary>
            This method is used to create a container on cloudfiles with a given name
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            connection.CreateContainer("container name");
            </code>
            </example>
            <param name="containerName">The desired name of the container</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.CreateContainer(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method is used to create a container on cloudfiles with a given name
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            connection.CreateContainer("container name");
            </code>
            </example>
            <param name="containerName">The desired name of the container</param>
            <param name="metadata">The metadata to associate with the new container.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.DeleteContainer(System.String)">
            <summary>
            This method is used to delete a container on cloudfiles
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            connection.DeleteContainer("container name");
            </code>
            </example>
            <param name="containerName">The name of the container to delete</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.PurgePublicContainer(System.String)">
            <summary>
            This method is used to delete a public container on cloudfiles
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            connection.PurgePublicContainer("container name");
            </code>
            </example>
            <param name="containerName">The name of the public container to purge</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.PurgePublicContainer(System.String,System.String[])">
            <summary>
            This method is used to delete a public container on cloudfiles
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            connection.PurgePublicContainer("container name", "me@me.com);
            </code>
            </example>
            <param name="containerName">The name of the container to delete</param>
            <param name="emailAddresses">The email addresses to notify once the deletion is complete</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetContainers">
            <summary>
            This method retrieves a list of containers associated with a given account
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            List{string} containers = connection.GetContainers();
            </code>
            </example>
            <returns>An instance of List, containing the names of the containers this account owns</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetContainers(System.Collections.Generic.Dictionary{Rackspace.CloudFiles.GetListParameters,System.String})">
            <summary>
            This method retrieves a list of containers associated with a given account
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            Dictionary{GetListParameters, string} parameters = new Dictionary{GetListParameters, string}();
            parameters.Add(GetListParameters.Limit, 2);
            parameters.Add(GetListParameters.Marker, 1);
            parameters.Add(GetListParameters.Prefix, "a");
            List{string} containers = connection.GetContainers();
            </code>
            </example>
            <param name="parameters">Parameters to feed to the request to filter the returned list</param>
            <returns>An instance of List, containing the names of the containers this account owns</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetContainerItemList(System.String)">
            <summary>
            This method retrieves the objects of a container, excluding folders
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            List{string} containerItemList = connection.GetContainerItemList("container name");
            </code>
            </example>
            <param name="containerName">The name of the container</param>
            <returns>An instance of List, containing the names of the storage objects in the give container</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.MakePath(System.String,System.String)">
            <summary>
            This method ensures directory objects created for the entire path
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            connection.MakePath("containername", "/dir1/dir2/dir3/dir4");
            </code>
            </example>
            <param name="containerName">The container to create the directory objects in</param>
            <param name="path">The path of directory objects to create</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetContainerItemList(System.String,System.Collections.Generic.Dictionary{Rackspace.CloudFiles.GetListParameters,System.String})">
            <summary>
            This method retrieves the contents of a container
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            Dictionary{GetListParameters, string} parameters = new Dictionary{GetListParameters, string}();
            parameters.Add(GetListParameters.Limit, 2);
            parameters.Add(GetListParameters.Marker, 1);
            parameters.Add(GetListParameters.Prefix, "a");
            List{string} containerItemList = connection.GetContainerItemList("container name", parameters);
            </code>
            </example>
            <param name="containerName">The name of the container</param>
            <param name="parameters">Parameters to feed to the request to filter the returned list</param>
            <returns>An instance of List, containing the names of the storage objects in the give container</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetContainerInformation(System.String)">
            <summary>
            This method retrieves the number of storage objects in a container, and the total size, in bytes, of the container
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            Container container = connection.GetContainerInformation("container name");
            </code>
            </example>
            <param name="containerName">The name of the container to query about</param>
            <returns>An instance of container, with the number of storage objects contained and total byte allocation</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetContainerInformationJson(System.String)">
            <summary>
            JSON serialized format of the container's objects
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            string jsonResponse = connection.GetContainerInformationJson("container name");
            </code>
            </example>
            <param name="containerName">name of the container to get information</param>
            <returns>json string of object information inside the container</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetContainerInformationXml(System.String)">
            <summary>
            XML serialized format of the container's objects
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            XmlDocument xmlResponse = connection.GetContainerInformationXml("container name");
            </code>
            </example>
            <param name="containerName">name of the container to get information</param>
            <returns>xml document of object information inside the container</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.PutStorageItem(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method uploads a storage object to cloudfiles with meta tags
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            Dictionary{string, string} metadata = new Dictionary{string, string}();
            metadata.Add("key1", "value1");
            metadata.Add("key2", "value2");
            metadata.Add("key3", "value3");
            connection.PutStorageItem("container name", "C:\Local\File\Path\file.txt", metadata);
            </code>
            </example>
            <param name="containerName">The name of the container to put the storage object in</param>
            <param name="localFilePath">The complete file path of the storage object to be uploaded</param>
            <param name="metadata">An optional parameter containing a dictionary of meta tags to associate with the storage object</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.PutStorageItem(System.String,System.String)">
            <summary>
            This method uploads a storage object to cloudfiles
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            connection.PutStorageItem("container name", "C:\Local\File\Path\file.txt");
            </code>
            </example>
            <param name="containerName">The name of the container to put the storage object in</param>
            <param name="localFilePath">The complete file path of the storage object to be uploaded</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.PutStorageItem(System.String,System.IO.Stream,System.String)">
            <summary>
            This method uploads a storage object to cloudfiles with an alternate name
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            FileInfo file = new FileInfo("C:\Local\File\Path\file.txt");
            connection.PutStorageItem("container name", file.Open(FileMode.Open), "RemoteFileName.txt");
            </code>
            </example>
            <param name="containerName">The name of the container to put the storage object in</param>
            <param name="remoteStorageItemName">The alternate name as it will be called on cloudfiles</param>
            <param name="storageStream">The stream representing the storage item to upload</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.PutStorageItemAsync(System.String,System.IO.Stream,System.String)">
            <summary>
            This method uploads a storage object to cloudfiles asychronously
            </summary>
            <example>
            <code>
            private void transferComplete()
            {
                if (InvokeRequired)
                {
                    Invoke(new CloseCallback(Close), new object[]{});
                }
                else
                {
                    if (!IsDisposed)
                        Close();
                }
            }
            
            private void fileTransferProgress(int bytesTransferred)
            {
               if (InvokeRequired)
               {
                   Invoke(new FileProgressCallback(fileTransferProgress), new object[] {bytesTransferred});
               }
               else
               {
                   System.Console.WriteLine(totalTransferred.ToString());
                   totalTransferred += bytesTransferred;
                   bytesTransferredLabel.Text = totalTransferred.ToString();
                   var progress = (int) ((totalTransferred/filesize)*100.0f);
                   if(progress &gt; 100)
                       progress = 100;
                   transferProgressBar.Value = progress ;
               }
            }
            
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            connection.AddProgressWatcher(fileTransferProgress);
            connection.OperationComplete += transferComplete;
            connection.PutStorageItemAsync("container name", "RemoteStorageItem.txt", "RemoteStorageItem.txt");
            </code>
            </example>
            <param name="containerName">The name of the container to put the storage object in</param>
            <param name="remoteStorageItemName">The alternate name as it will be called on cloudfiles</param>
            <param name="storageStream">The stream representing the storage item to upload</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.PutStorageItemAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method uploads a storage object to cloudfiles asychronously
            </summary>
            <example>
            <code>
            private void transferComplete()
            {
                if (InvokeRequired)
                {
                    Invoke(new CloseCallback(Close), new object[]{});
                }
                else
                {
                    if (!IsDisposed)
                        Close();
                }
            }
            
            private void fileTransferProgress(int bytesTransferred)
            {
               if (InvokeRequired)
               {
                   Invoke(new FileProgressCallback(fileTransferProgress), new object[] {bytesTransferred});
               }
               else
               {
                   System.Console.WriteLine(totalTransferred.ToString());
                   totalTransferred += bytesTransferred;
                   bytesTransferredLabel.Text = totalTransferred.ToString();
                   var progress = (int) ((totalTransferred/filesize)*100.0f);
                   if(progress &gt; 100)
                       progress = 100;
                   transferProgressBar.Value = progress ;
               }
            }
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            Dictionary{string, string} metadata = new Dictionary{string, string}();
            metadata.Add("key1", "value1");
            metadata.Add("key2", "value2");
            metadata.Add("key3", "value3");
            connection.PutStorageItemAsync("container name", "LocalFileName.txt", metadata);
            </code>
            </example>
            <param name="containerName">The name of the container to put the storage object in</param>
            <param name="localStorageItemName">The name of the file locally </param>
            <param name="metadata">An optional parameter containing a dictionary of meta tags to associate with the storage object</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.PutStorageItemAsync(System.String,System.IO.Stream,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method uploads a storage object to cloudfiles asychronously
            </summary>
            <example>
            <code>
            private void transferComplete()
            {
                if (InvokeRequired)
                {
                    Invoke(new CloseCallback(Close), new object[]{});
                }
                else
                {
                    if (!IsDisposed)
                        Close();
                }
            }
            
            private void fileTransferProgress(int bytesTransferred)
            {
               if (InvokeRequired)
               {
                   Invoke(new FileProgressCallback(fileTransferProgress), new object[] {bytesTransferred});
               }
               else
               {
                   System.Console.WriteLine(totalTransferred.ToString());
                   totalTransferred += bytesTransferred;
                   bytesTransferredLabel.Text = totalTransferred.ToString();
                   var progress = (int) ((totalTransferred/filesize)*100.0f);
                   if(progress &gt; 100)
                       progress = 100;
                   transferProgressBar.Value = progress ;
               }
            }
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            Dictionary{string, string} metadata = new Dictionary{string, string}();
            metadata.Add("key1", "value1");
            metadata.Add("key2", "value2");
            metadata.Add("key3", "value3");
            FileInfo file = new FileInfo("C:\Local\File\Path\file.txt");
            connection.PutStorageItemAsync("container name", file.Open(FileMode.Open), "RemoteFileName.txt", metadata);
            </code>
            </example>
            <param name="containerName">The name of the container to put the storage object in</param>
            <param name="remoteStorageItemName">The alternate name as it will be called on cloudfiles</param>
            <param name="storageStream">The stream representing the storage item to upload</param>
            <param name="metadata">An optional parameter containing a dictionary of meta tags to associate with the storage object</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.PutStorageItemAsync(System.String,System.String)">
            <summary>
            This method uploads a storage object to cloudfiles asychronously
            </summary>
            <example>
            <code>
            private void transferComplete()
            {
                if (InvokeRequired)
                {
                    Invoke(new CloseCallback(Close), new object[]{});
                }
                else
                {
                    if (!IsDisposed)
                        Close();
                }
            }
            
            private void fileTransferProgress(int bytesTransferred)
            {
               if (InvokeRequired)
               {
                   Invoke(new FileProgressCallback(fileTransferProgress), new object[] {bytesTransferred});
               }
               else
               {
                   System.Console.WriteLine(totalTransferred.ToString());
                   totalTransferred += bytesTransferred;
                   bytesTransferredLabel.Text = totalTransferred.ToString();
                   var progress = (int) ((totalTransferred/filesize)*100.0f);
                   if(progress &gt; 100)
                       progress = 100;
                   transferProgressBar.Value = progress ;
               }
            }
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            connection.PutStorageItemAsync("container name", "LocalFileName.txt");
            </code>
            </example>
            <param name="containerName">The name of the container to put the storage object in</param>
            <param name="localStorageItemName">The name of the file locally </param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.PutStorageItem(System.String,System.IO.Stream,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method uploads a storage object to cloudfiles with an alternate name
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            Dictionary{string, string} metadata = new Dictionary{string, string}();
            metadata.Add("key1", "value1");
            metadata.Add("key2", "value2");
            metadata.Add("key3", "value3");
            FileInfo file = new FileInfo("C:\Local\File\Path\file.txt");
            connection.PutStorageItem("container name", file.Open(FileMode.Open), "RemoteFileName.txt", metadata);
            </code>
            </example>
            <param name="containerName">The name of the container to put the storage object in</param>
            <param name="storageStream">The file stream to upload</param>
            <param name="metadata">An optional parameter containing a dictionary of meta tags to associate with the storage object</param>
            <param name="remoteStorageItemName">The name of the storage object as it will be called on cloudfiles</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.DeleteStorageItem(System.String,System.String)">
            <summary>
            This method deletes a storage object in a given container
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            connection.DeleteStorageItem("container name", "RemoteStorageItem.txt");
            </code>
            </example>
            <param name="containerName">The name of the container that contains the storage object</param>
            <param name="storageItemName">The name of the storage object to delete</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.PurgePublicStorageItem(System.String,System.String)">
            <summary>
            This method deletes a storage object in a given container
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            connection.DeleteStorageItem("container name", "RemoteStorageItem.txt");
            </code>
            </example>
            <param name="containerName">The name of the container that contains the storage object</param>
            <param name="storageItemName">The name of the storage object to delete</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.PurgePublicStorageItem(System.String,System.String,System.String[])">
            <summary>
            This method deletes a storage object in a given public container
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            connection.DeleteStorageItem("container name", "RemoteStorageItem.txt");
            </code>
            </example>
            <param name="containerName">The name of the public container that contains the storage object</param>
            <param name="storageItemName">The name of the storage object to delete</param>
            <param name="emailAddresses">The email addresses to notify once the purge is complete</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetStorageItem(System.String,System.String)">
            <summary>
            This method downloads a storage object from cloudfiles
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            StorageItem storageItem = connection.GetStorageItem("container name", "RemoteStorageItem.txt");
            </code>
            </example>
            <param name="containerName">The name of the container that contains the storage object to retrieve</param>
            <param name="storageItemName">The name of the storage object to retrieve</param>
            <returns>An instance of StorageItem with the stream containing the bytes representing the desired storage object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetStorageItem(System.String,System.String,System.Collections.Generic.Dictionary{Rackspace.CloudFiles.Domain.Request.RequestHeaderFields,System.String})">
            <summary>
            An alternate method for downloading storage objects. This one allows specification of special HTTP 1.1 compliant GET headers
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials); 
            Dictionary{RequestHeaderFields, string} requestHeaderFields = Dictionary{RequestHeaderFields, string}();
            string dummy_etag = "5c66108b7543c6f16145e25df9849f7f";
            requestHeaderFields.Add(RequestHeaderFields.IfMatch, dummy_etag);
            requestHeaderFields.Add(RequestHeaderFields.IfNoneMatch, dummy_etag);
            requestHeaderFields.Add(RequestHeaderFields.IfModifiedSince, DateTime.Now.AddDays(6).ToString());
            requestHeaderFields.Add(RequestHeaderFields.IfUnmodifiedSince, DateTime.Now.AddDays(-6).ToString());
            requestHeaderFields.Add(RequestHeaderFields.Range, "0-5");
            StorageItem storageItem = connection.GetStorageItem("container name", "RemoteStorageItem.txt", requestHeaderFields);
            </code>
            </example>
            <param name="containerName">The name of the container that contains the storage object</param>
            <param name="storageItemName">The name of the storage object</param>
            <param name="requestHeaderFields">A dictionary containing the special headers and their values</param>
            <returns>An instance of StorageItem with the stream containing the bytes representing the desired storage object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetStorageItemAsync(System.String,System.String,System.String)">
            <summary>
            This method downloads a storage object from cloudfiles asychronously
            </summary>
            <example>
            <code>
            private void transferComplete()
            {
                if (InvokeRequired)
                {
                    Invoke(new CloseCallback(Close), new object[]{});
                }
                else
                {
                    if (!IsDisposed)
                        Close();
                }
            }
            
            private void fileTransferProgress(int bytesTransferred)
            {
               if (InvokeRequired)
               {
                   Invoke(new FileProgressCallback(fileTransferProgress), new object[] {bytesTransferred});
               }
               else
               {
                   System.Console.WriteLine(totalTransferred.ToString());
                   totalTransferred += bytesTransferred;
                   bytesTransferredLabel.Text = totalTransferred.ToString();
                   var progress = (int) ((totalTransferred/filesize)*100.0f);
                   if(progress &gt; 100)
                       progress = 100;
                   transferProgressBar.Value = progress ;
               }
            }
            
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            connection.AddProgressWatcher(fileTransferProgress);
            connection.OperationComplete += transferComplete;
            connection.GetStorageItemAsync("container name", "RemoteStorageItem.txt", "RemoteStorageItem.txt");
            </code>
            </example>
            <param name="containerName">The name of the container that contains the storage object to retrieve</param>
            <param name="storageItemName">The name of the storage object to retrieve</param>
            <param name="localFileName">The name to write the file to on your hard drive. </param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetStorageItemAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{Rackspace.CloudFiles.Domain.Request.RequestHeaderFields,System.String})">
            <summary>
            This method downloads a storage object from cloudfiles asychronously
            </summary>
            <example>
            <code>
            private void transferComplete()
            {
                if (InvokeRequired)
                {
                    Invoke(new CloseCallback(Close), new object[]{});
                }
                else
                {
                    if (!IsDisposed)
                        Close();
                }
            }
            
            private void fileTransferProgress(int bytesTransferred)
            {
               if (InvokeRequired)
               {
                   Invoke(new FileProgressCallback(fileTransferProgress), new object[] {bytesTransferred});
               }
               else
               {
                   System.Console.WriteLine(totalTransferred.ToString());
                   totalTransferred += bytesTransferred;
                   bytesTransferredLabel.Text = totalTransferred.ToString();
                   var progress = (int) ((totalTransferred/filesize)*100.0f);
                   if(progress &gt; 100)
                       progress = 100;
                   transferProgressBar.Value = progress ;
               }
            }
            Dictionary{RequestHeaderFields, string} requestHeaderFields = Dictionary{RequestHeaderFields, string}();
            string dummy_etag = "5c66108b7543c6f16145e25df9849f7f";
            requestHeaderFields.Add(RequestHeaderFields.IfMatch, dummy_etag);
            requestHeaderFields.Add(RequestHeaderFields.IfNoneMatch, dummy_etag);
            requestHeaderFields.Add(RequestHeaderFields.IfModifiedSince, DateTime.Now.AddDays(6).ToString());
            requestHeaderFields.Add(RequestHeaderFields.IfUnmodifiedSince, DateTime.Now.AddDays(-6).ToString());
            requestHeaderFields.Add(RequestHeaderFields.Range, "0-5");
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            connection.AddProgressWatcher(fileTransferProgress);
            connection.OperationComplete += transferComplete;
            connection.GetStorageItemAsync("container name", "RemoteStorageItem.txt", "RemoteStorageItem.txt", requestHeaderFields);
            </code>
            </example>
            <param name="containerName">The name of the container that contains the storage object to retrieve</param>
            <param name="storageItemName">The name of the storage object to retrieve</param>
            <param name="localFileName">The name to write the file to on your hard drive. </param>
            <param name="requestHeaderFields">A dictionary containing the special headers and their values</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetStorageItem(System.String,System.String,System.String)">
            <summary>
            An alternate method for downloading storage objects from cloudfiles directly to a file name specified in the method
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            StorageItem storageItem = connection.GetStorageItem("container name", "RemoteStorageItem.txt", "C:\Local\File\Path\file.txt");
            </code>
            </example>
            <param name="containerName">The name of the container that contains the storage object to retrieve</param>
            <param name="storageItemName">The name of the storage object to retrieve</param>
            <param name="localFileName">The file name to save the storage object into on disk</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetStorageItem(System.String,System.String,System.String,System.Collections.Generic.Dictionary{Rackspace.CloudFiles.Domain.Request.RequestHeaderFields,System.String})">
            <summary>
            An alternate method for downloading storage objects from cloudfiles directly to a file name specified in the method
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            Dictionary{RequestHeaderFields, string} requestHeaderFields = Dictionary{RequestHeaderFields, string}();
            string dummy_etag = "5c66108b7543c6f16145e25df9849f7f";
            requestHeaderFields.Add(RequestHeaderFields.IfMatch, dummy_etag);
            requestHeaderFields.Add(RequestHeaderFields.IfNoneMatch, dummy_etag);
            requestHeaderFields.Add(RequestHeaderFields.IfModifiedSince, DateTime.Now.AddDays(6).ToString());
            requestHeaderFields.Add(RequestHeaderFields.IfUnmodifiedSince, DateTime.Now.AddDays(-6).ToString());
            requestHeaderFields.Add(RequestHeaderFields.Range, "0-5");
            StorageItem storageItem = connection.GetStorageItem("container name", "RemoteFileName.txt", "C:\Local\File\Path\file.txt", requestHeaderFields);
            </code>
            </example>
            <param name="containerName">The name of the container that contains the storage object to retrieve</param>
            <param name="storageItemName">The name of the storage object to retrieve</param>
            <param name="localFileName">The file name to save the storage object into on disk</param>
            <param name="requestHeaderFields">A dictionary containing the special headers and their values</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.SetStorageItemMetaInformation(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method applies meta tags to a storage object on cloudfiles
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            Dictionary{string, string} metadata = new Dictionary{string, string}();
            metadata.Add("key1", "value1");
            metadata.Add("key2", "value2");
            metadata.Add("key3", "value3");
            connection.SetStorageItemMetaInformation("container name", "C:\Local\File\Path\file.txt", metadata);
            </code>
            </example>
            <param name="containerName">The name of the container containing the storage object</param>
            <param name="storageItemName">The name of the storage object</param>
            <param name="metadata">A dictionary containiner key/value pairs representing the meta data for this storage object</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetStorageItemInformation(System.String,System.String)">
            <summary>
            This method retrieves meta information and size, in bytes, of a requested storage object
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            StorageItem storageItem = connection.GetStorageItemInformation("container name", "RemoteStorageItem.txt");
            </code>
            </example>
            <param name="containerName">The name of the container that contains the storage object</param>
            <param name="storageItemName">The name of the storage object</param>
            <returns>An instance of StorageItem containing the byte size and meta information associated with the container</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetPublicContainers">
            <summary>
            This method retrieves the names of the of the containers made public on the CDN
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            List{string} containers = connection.GetPublicContainers();
            </code>
            </example>
            <returns>A list of the public containers</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.MarkContainerAsPublic(System.String,System.Int32)">
            <summary>
            This method sets a container as public on the CDN
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            Uri containerPublicUrl = connection.MarkContainerAsPublic("container name", 12345);
            </code>
            </example>
            <param name="containerName">The name of the container to mark public</param>
            <param name="timeToLiveInSeconds">The maximum time (in seconds) content should be kept alive on the CDN before it checks for freshness.</param>
            <returns>A string representing the URL of the public container or null</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.MarkContainerAsPublic(System.String)">
            <summary>
            This method sets a container as public on the CDN
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            Uri containerPublicUrl = connection.MarkContainerAsPublic("container name");
            </code>
            </example>
            <param name="containerName">The name of the container to mark public</param>
            <returns>A string representing the URL of the public container or null</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.MarkContainerAsPrivate(System.String)">
            <summary>
            This method sets a container as private on the CDN
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            connection.MarkContainerAsPrivate("container name");
            </code>
            </example>
            <param name="containerName">The name of the container to mark public</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetPublicContainerInformation(System.String)">
            <summary>
            Retrieves a Container object containing the public CDN information
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            Container container = connection.GetPublicContainerInformation("container name")
            </code>
            </example>
            <param name="containerName">The name of the container to query about</param>
            <returns>An instance of Container with appropriate CDN information or null</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the reference parameters are null</exception>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.SetDetailsOnPublicContainer(System.String,System.Boolean,System.Int32)">
            <summary>
            
            </summary>
            <param name="publiccontainer"></param>
            <param name="loggingenabled"></param>
            <param name="ttl"></param>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetPublicAccountInformationXML">
            <summary>
            XML serialized format of the public account information
            </summary>
            <example>
            <code>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            XmlDocument xmlResponse = connection.GetPublicAccountInformationXML();
            </code>
            </example>
            <returns>xml document of public account information</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Connection.GetPublicAccountInformationJSON">
            <summary>
            JSON serialized format of the public account information
            </summary>
            UserCredentials userCredentials = new UserCredentials("username", "api key");
            IConnection connection = new Connection(userCredentials);
            string jsonResponse = connection.GetPublicAccountInformationJSON();
            <returns>json string of public account information</returns>
        </member>
        <member name="P:Rackspace.CloudFiles.Connection.AuthenticationTime">
            <summary>
            Gets the UTC Date/Time the connection was most recently authenticated.
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Connection.MaxCallbackFreq">
            <summary>
            The amount of time that must elapse between calls to the UploadProgress callback method.
            </summary>
            <remarks>
            If this value is null, the callback will not be filtered based on time elapsed
            since the previous call.
            </remarks>
        </member>
        <member name="P:Rackspace.CloudFiles.Connection.MaxBytesTxDeltaFreq">
            <summary>
            Specifies the the number of bytes that can be transmitted
            between calls to the callback function, when the MaxCallbackFreq
            is enabled, before the MaxCallbackFreq is ignored and the UploadProgress callback is
            called.
            </summary>
            <remarks>
            Example:
            If the MaxCallbackFreq is set to 10 seconds, and MaxBytesTxDeltaFreq is set to 32768 bytes,
            and it has been 6 seconds since the previous call to the callback method, but 49152 bytes
            have been transmitted since the previous call to the callback method, the MaxCallbackFreq will
            be ignored, and the callback will be called.
            </remarks>
        </member>
        <member name="P:Rackspace.CloudFiles.Connection.MinUploadBytesTxDeltaFreq">
            <summary>
            The minimum number of bytes that must be transmitted between calls to the UploadProgress callback,
            regardless of the MaxCallbackFreq.
            </summary>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.StorageItem">
            <summary>
            StorageItem
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.StorageItem.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int64,System.DateTime)">
            <summary>
            
            </summary>
            <param name="objectName"></param>
            <param name="metadata"></param>
            <param name="objectContentType"></param>
            <param name="contentLength"></param>
            <param name="lastModified"></param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.StorageItem.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.IO.Stream,System.Int64,System.DateTime)">
            <summary>
            
            </summary>
            <param name="objectName"></param>
            <param name="metadata"></param>
            <param name="objectContentType"></param>
            <param name="contentStream"></param>
            <param name="contentLength"></param>
            <param name="lastModified"></param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.StorageItem.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.StorageItem.FileLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.StorageItem.ContentType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.StorageItem.Metadata">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.StorageItem.ObjectStream">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.StorageItem.ObjectName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rackspace.CloudFiles.Domain.UserCredentials">
            <summary>
            UserCredentials
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.UserCredentials.#ctor(System.String,System.String)">
            <summary>
            Constructor - defaults Auth Url to https://api.mosso.com/auth without proxy credentials
            </summary>
            <param name="username">client username to use during authentication</param>
            <param name="api_access_key">client api access key to use during authentication</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.UserCredentials.#ctor(System.String,System.String,Rackspace.CloudFiles.Domain.ProxyCredentials)">
            <summary>
            Constructor - defaults Auth Url to https://api.mosso.com/auth with proxy credentials
            </summary>
            <param name="username">client username to use during authentication</param>
            <param name="api_access_key">client api access key to use during authentication</param>
            <param name="proxyCredentials">credentials to use to obtain access via proxy</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.UserCredentials.#ctor(System.Uri,System.String,System.String)">
            <summary>
            Constructor - specific auth url with username and api key
            </summary>
            <param name="authUrl">url to authenticate against</param>
            <param name="username">client username to use during authentication</param>
            <param name="api_access_key">client api access key to use during authentication</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.UserCredentials.#ctor(System.Uri,System.String,System.String,System.String,System.String,Rackspace.CloudFiles.Domain.ProxyCredentials)">
            <summary>
            UserCredential constructor
            </summary>
            <param name="authUrl">url to authenticate against</param>
            <param name="username">client username to use during authentication</param>
            <param name="api_access_key">client api access key to use during authentication</param>
            <param name="cloudversion">version of the cloudfiles system to access</param>
            <param name="accountName">client account name</param>
            <param name="proxyCredentials">credentials to use to obtain access via proxy</param>
            <returns>An instance of UserCredentials</returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Domain.UserCredentials.#ctor(System.Uri,System.String,System.String,System.String,System.String)">
            <summary>
            UserCredential constructor
            </summary>
            <param name="authUrl">url to authenticate against</param>
            <param name="username">client username to use during authentication</param>
            <param name="api_access_key">client api access key to use during authentication</param>
            <param name="cloudversion">version of the cloudfiles system to access</param>
            <param name="accountname">client account name</param>
            <returns>An instance of UserCredentials</returns>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.UserCredentials.ProxyCredentials">
            <summary>
            Proxy Credentials
            </summary>
            <returns>An instance of the local proxy credentials</returns>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.UserCredentials.Api_access_key">
            <summary>
            api access key to use for authentication
            </summary>
            <returns>a string representation of the api access key used to authenticate against the user's account</returns>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.UserCredentials.AccountName">
            <summary>
            username to use for authentication
            </summary>
            <returns>a string representation of the account name used to authenticate against the user's account</returns>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.UserCredentials.AuthUrl">
            <summary>
            the url to authenticate against
            </summary>
            <returns>a Uri instance having the url for authentication</returns>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.UserCredentials.Cloudversion">
            <summary>
            version of the cloudfiles system
            </summary>
            <returns>a string representation of the cloudfiles system version</returns>
        </member>
        <member name="P:Rackspace.CloudFiles.Domain.UserCredentials.Username">
            <summary>
            username to use for authentication
            </summary>
            <returns>a string representation of the username used to authenticate against the user's account</returns>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.ContainerNameException">
            <summary>
            Thrown when the name of the container is invalid
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.ContainerNameException.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.ContainerNameException.#ctor(System.String)">
            <summary>
            A constructor for describing the explicit issue with the container name
            </summary>
            <param name="message">A message indicating the explicit issue with the container name.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.InvalidResponseTypeException">
            <summary>
            This exception is thrown when the wrong IResponse type is passed into an instance of ResponseFactory
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.InvalidResponseTypeException.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.InvalidResponseTypeException.#ctor(System.String)">
            <summary>
            Used to construct an InvalidResponseTypeException containing the explicit reason for failure
            </summary>
            <param name="msg">Used to more explicitly indicate the reason for failure</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.MetaKeyLengthException">
            <summary>
            This exception is thrown when the length of the meta key in the meta data header is longer than the maximum allowed length
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.MetaKeyLengthException.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.MetaKeyLengthException.#ctor(System.String)">
            <summary>
            A constructor for indicating the explicit reason for failure
            </summary>
            <param name="exception">Used to indicate the maximum length allowed by cloudfiles</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.MetaValueLengthException">
            <summary>
            This exception is thrown when the length of the meta value in the meta data header is longer than the maximum allowed length
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.MetaValueLengthException.#ctor">
            <summary>
            The primary constructor for creating 
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.MetaValueLengthException.#ctor(System.String)">
            <summary>
            A constructor for indicating the explicit reason for failure
            </summary>
            <param name="exception">Used to explicitly indicate the maximum length allowed by cloudfiles</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.StorageItemNameException">
            <summary>
            Thrown when the name of the object is invalid
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.StorageItemNameException.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.StorageItemNameException.#ctor(System.String)">
            <summary>
            A constructor for describing the explicit issue with the object name
            </summary>
            <param name="message">A message indicating the explicit issue with the container name.</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Utils.Constants">
            <summary>
            This class initializes the constants which would be utilized all over the application.
            </summary>
        </member>
        <member name="T:Rackspace.CloudFiles.Exceptions.AuthenticationFailedException">
            <summary>
            Thrown when the user has incorrect authentication credentials.
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.AuthenticationFailedException.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Exceptions.AuthenticationFailedException.#ctor(System.String)">
            <summary>
            A constructor for describing the reason for failure
            </summary>
            <param name="exception">A description of why the authentication failed</param>
        </member>
        <member name="T:Rackspace.CloudFiles.Utils.Log">
            <summary>
            the logging class
            </summary>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.SerializeException(System.Exception)">
            <summary>
            serialize the exception
            </summary>
            <param name="e">exception to serialize</param>
            <returns></returns>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Debug(System.Object,System.Object)">
            <summary>
            log a message as a debug message
            </summary>
            <param name="source">object source</param>
            <param name="message">message to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Debug(System.Type,System.Object)">
            <summary>
            log a message as a debug message
            </summary>
            <param name="source">object type</param>
            <param name="message">message to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Info(System.Object,System.Object)">
            <summary>
            log a message as an info message
            </summary>
            <param name="source">object source</param>
            <param name="message">message to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Info(System.Type,System.Object)">
            <summary>
            log a message as an info message
            </summary>
            <param name="source">object type</param>
            <param name="message">message to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Warn(System.Object,System.Object)">
            <summary>
            log a message as a warn message
            </summary>
            <param name="source">object source</param>
            <param name="message">message to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Warn(System.Type,System.Object)">
            <summary>
            log a message as a warn message
            </summary>
            <param name="source">object type</param>
            <param name="message">message to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Error(System.Object,System.Object)">
            <summary>
            log a message as an error message
            </summary>
            <param name="source">object source</param>
            <param name="message">message to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Error(System.Type,System.Object)">
            <summary>
            log a message as an error message
            </summary>
            <param name="source">object type</param>
            <param name="message">message to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Fatal(System.Object,System.Object)">
            <summary>
            log a message as a fatal message
            </summary>
            <param name="source">object source</param>
            <param name="message">message to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Fatal(System.Type,System.Object)">
            <summary>
            log a message as a fatal message
            </summary>
            <param name="source">object type</param>
            <param name="message">message to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Debug(System.Object,System.Object,System.Exception)">
            <summary>
            log a message as a debug message with an exception
            </summary>
            <param name="source">object source</param>
            <param name="message">message to log</param>
            <param name="exception">exception to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Debug(System.Type,System.Object,System.Exception)">
            <summary>
            log a message as a debug message with an exception
            </summary>
            <param name="source">object type</param>
            <param name="message">message to log</param>
            <param name="exception">exception to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Info(System.Object,System.Object,System.Exception)">
            <summary>
            log a message as an info message with an exception
            </summary>
            <param name="source">object source</param>
            <param name="message">message to log</param>
            <param name="exception">exception to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Info(System.Type,System.Object,System.Exception)">
            <summary>
            log a message as an info message with an exception
            </summary>
            <param name="source">object type</param>
            <param name="message">message to log</param>
            <param name="exception">exception to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Warn(System.Object,System.Object,System.Exception)">
            <summary>
            log a message as a warn message with an exception
            </summary>
            <param name="source">object source</param>
            <param name="message">message to log</param>
            <param name="exception">exception to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Warn(System.Type,System.Object,System.Exception)">
            <summary>
            log a message as a warn message with an exception
            </summary>
            <param name="source">object type</param>
            <param name="message">message to log</param>
            <param name="exception">exception to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Error(System.Object,System.Object,System.Exception)">
            <summary>
            log a message as an error message with an exception
            </summary>
            <param name="source">object source</param>
            <param name="message">message to log</param>
            <param name="exception">exception to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Error(System.Type,System.Object,System.Exception)">
            <summary>
            log a message as an error message with an exception
            </summary>
            <param name="source">object type</param>
            <param name="message">message to log</param>
            <param name="exception">exception to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Fatal(System.Object,System.Object,System.Exception)">
            <summary>
            log a message as a fatal message with an exception
            </summary>
            <param name="source">object source</param>
            <param name="message">message to log</param>
            <param name="exception">exception to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.Fatal(System.Type,System.Object,System.Exception)">
            <summary>
            log a message as a fatal message with an exception
            </summary>
            <param name="source">object type</param>
            <param name="message">message to log</param>
            <param name="exception">exception to log</param>
        </member>
        <member name="M:Rackspace.CloudFiles.Utils.Log.EnsureInitialized">
            <summary>
            ensures the logging mechanism is initialized
            </summary>
        </member>
    </members>
</doc>
